"""Tests for project storage operations."""

import pytest
import sqlite3
from pm.models import Project
from pm.storage import init_db
from pm.storage.project import create_project, get_project, get_project_by_slug, list_projects
from pm.core.utils import generate_slug  # Needed for checking expected slugs


@pytest.fixture
def db_connection(tmp_path):
    """Fixture providing a clean database connection for each test."""
    db_path = tmp_path / "test.db"
    conn = init_db(str(db_path))  # Ensure db_path is string
    yield conn
    conn.close()


def test_project_creation_storage(db_connection):
    """Test creating and retrieving a project via storage functions."""
    # Note: Slug is now optional in model, generated by create_project
    project_data = Project(
        id="test-project-storage",
        name="Test Project Storage",
        description="A test project via storage"
    )
    created_project = create_project(db_connection, project_data)
    assert created_project.id == "test-project-storage"
    assert created_project.name == "Test Project Storage"
    assert created_project.slug == "test-project-storage"  # Verify generated slug

    retrieved_project = get_project(db_connection, "test-project-storage")
    assert retrieved_project.id == "test-project-storage"
    assert retrieved_project.name == "Test Project Storage"
    assert retrieved_project.status.value == "ACTIVE"  # Check default status
    assert retrieved_project.slug == "test-project-storage"  # Verify slug on retrieval


def test_project_slug_storage(db_connection):
    """Test project slug generation, uniqueness, and retrieval via storage."""
    # Create first project
    proj1_data = Project(id="proj-1", name="Slug Test Project")
    proj1 = create_project(db_connection, proj1_data)
    expected_slug1 = "slug-test-project"
    assert proj1.slug == expected_slug1

    # Retrieve by ID and check slug
    retrieved1_by_id = get_project(db_connection, "proj-1")
    assert retrieved1_by_id.slug == expected_slug1

    # Retrieve by slug
    retrieved1_by_slug = get_project_by_slug(db_connection, expected_slug1)
    assert retrieved1_by_slug.id == "proj-1"
    assert retrieved1_by_slug.slug == expected_slug1

    # Create second project with the same name (collision)
    proj2_data = Project(id="proj-2", name="Slug Test Project")
    proj2 = create_project(db_connection, proj2_data)
    expected_slug2 = "slug-test-project-1"  # Expect collision handling
    assert proj2.slug == expected_slug2

    # Retrieve second project by slug
    retrieved2_by_slug = get_project_by_slug(db_connection, expected_slug2)
    assert retrieved2_by_slug.id == "proj-2"
    assert retrieved2_by_slug.slug == expected_slug2

    # Test listing includes slugs
    projects = list_projects(db_connection)
    project_map = {p.id: p for p in projects}
    assert project_map["proj-1"].slug == expected_slug1
    assert project_map["proj-2"].slug == expected_slug2

    # Test retrieval by non-existent slug
    assert get_project_by_slug(db_connection, "non-existent-slug") is None
